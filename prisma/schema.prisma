generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model fit_comida {
  N_ID_COMIDA        Int                       @id @default(autoincrement())
  X_NOMBRE_COMIDA    String?                   @db.VarChar(100)
  X_DESCRIPCION      String?                   @db.Text
  N_CALORIAS         Int?
  X_IMG              String?
  X_TIPO_COMIDA      fit_comida_X_TIPO_COMIDA?
  fit_comida_detalle fit_comida_detalle[]
  fit_plan_comida_dia fit_plan_comida_dia[] // Relación con fit_plan_comida_dia
  fit_horario_comida  fit_horario_comida[]  // Relación con fit_horario_comida
  fit_pedido_detalle  fit_pedido_detalle[]
}

model fit_comida_detalle {
  N_ID_DETALLE_COMIDA Int               @id @default(autoincrement())
  N_ID_COMIDA         Int?
  N_ID_INGREDIENTE    Int?
  N_CANTIDAD          Float?
  fit_comida          fit_comida?       @relation(fields: [N_ID_COMIDA], references: [N_ID_COMIDA], onDelete: Restrict, onUpdate: Restrict, map: "fit_comida_detalle_ibfk_1")
  fit_ingredientes    fit_ingredientes? @relation(fields: [N_ID_INGREDIENTE], references: [N_ID_INGREDIENTE], onDelete: Restrict, onUpdate: Restrict, map: "fit_comida_detalle_ibfk_2")

  @@index([N_ID_COMIDA], map: "N_ID_COMIDA")
  @@index([N_ID_INGREDIENTE], map: "N_ID_INGREDIENTE")
}

model fit_costos {
  N_ID_COSTO_INGREDIENTE  Int               @id @default(autoincrement())
  N_ID_INGREDIENTE        Int?
  N_ID_DELIVERY           Int?
  F_REGISTRO              DateTime?         
  N_COSTO_UNIT            Float?
  N_CANTIDAD              Float?
  N_SUBTOTAL_INGREDIENTES Float?
  N_COSTO_TOTAL           Float?
  fit_ingredientes        fit_ingredientes? @relation(fields: [N_ID_INGREDIENTE], references: [N_ID_INGREDIENTE], onDelete: Restrict, onUpdate: Restrict, map: "fit_costos_ibfk_1")

  @@index([N_ID_INGREDIENTE], map: "fit_costos_N_ID_INGREDIENTE")
}

model fit_delivery {
  N_ID_DELIVERY    Int       @id @default(autoincrement())
  N_ID_PEDIDO      Int?
  N_COSTO_DELIVERY Float?
  X_ENCARGADO      String?   @db.VarChar(100)
  F_PEDIDO         DateTime? @db.Date
}

model fit_ingredientes {
  N_ID_INGREDIENTE     Int                  @id @default(autoincrement())
  N_ID_UNIDAD_MEDIDA   Int?
  X_NOMBRE_INGREDIENTE String?              @db.VarChar(100)
  F_INGRESO            DateTime?            
  X_DESCRIPCION        String?              @db.Text
  N_CANTIDAD           Float?
  N_COSTO_UNIT         Float?
  N_CALORIAS           Int?
  fit_comida_detalle   fit_comida_detalle[]
  fit_costos           fit_costos[]
  fit_unidad_medida    fit_unidad_medida?   @relation(fields: [N_ID_UNIDAD_MEDIDA], references: [N_ID_UNIDAD_MEDIDA], onDelete: Restrict, onUpdate: Restrict, map: "fit_ingredientes_ibfk_1")

  @@index([N_ID_UNIDAD_MEDIDA], map: "N_ID_UNIDAD_MEDIDA")
}

model fit_pago {
  N_ID_PAGO     Int                     @id @default(autoincrement())
  N_ID_USUARIO  Int?
  N_ID_PLAN     Int?
  N_MONTO       Float?
  X_METODO_PAGO String?                 @db.VarChar(50)
  F_PAGO        DateTime?               @db.Date
  X_ESTADO_PAGO fit_pago_X_ESTADO_PAGO?
  fit_usuario   fit_usuario?            @relation(fields: [N_ID_USUARIO], references: [N_ID_USUARIO], onDelete: Restrict, onUpdate: Restrict, map: "fit_pago_ibfk_1")
  fit_plan      fit_plan?               @relation(fields: [N_ID_PLAN], references: [N_ID_PLAN], onDelete: Restrict, onUpdate: Restrict, map: "fit_pago_ibfk_2")

  @@index([N_ID_PLAN], map: "fit_pago_N_ID_PLAN")
  @@index([N_ID_USUARIO], map: "fit_pago_N_ID_USUARIO")
}

model fit_pedido {
  N_ID_PEDIDO        Int                         @id @default(autoincrement())
  N_ID_USUARIO       Int
  N_ID_DIRECCION     Int
  F_PEDIDO           DateTime?                   
  X_ESTADO_PEDIDO    fit_pedido_X_ESTADO_PEDIDO?
  fit_pedido_detalle fit_pedido_detalle[]
  fit_usuario        fit_usuario?                @relation(fields: [N_ID_USUARIO], references: [N_ID_USUARIO], onDelete: Cascade)
  fit_direccion      fit_direccion               @relation(fields: [N_ID_DIRECCION], references: [N_ID_DIRECCION])
  
  @@index([N_ID_USUARIO], map: "fit_pedido_N_ID_USUARIO")
  @@map("fit_pedido")
}

model fit_pedido_detalle {
  N_ID_DETALLE_PEDIDO Int         @id @default(autoincrement())
  N_ID_PEDIDO         Int?
  N_ID_COMIDA         Int?
  N_CANTIDAD          Int?
  fit_pedido          fit_pedido? @relation(fields: [N_ID_PEDIDO], references: [N_ID_PEDIDO], onDelete: Restrict, onUpdate: Restrict, map: "fit_pedido_detalle_ibfk_1")
  fit_comida          fit_comida? @relation(fields: [N_ID_COMIDA], references: [N_ID_COMIDA])

  @@index([N_ID_PEDIDO], map: "N_ID_PEDIDO")
}

model fit_plan {
  N_ID_PLAN         Int           @id @default(autoincrement())
  X_NOMBRE_PLAN     String?       @db.VarChar(100)
  X_DESCRIPCION     String?       @db.Text
  N_PRECIO          Float?
  N_TIEMPO_DURACION Int?
  X_IMAGE           String?
  fit_images        fit_image[]
  fit_pago          fit_pago[]
  fit_usuario       fit_usuario[]
  fit_plan_comida_dia fit_plan_comida_dia[] // Relación con fit_plan_comida_dia
  fit_plan_comida_tipo fit_plan_comida_tipo[] // Relación con fit_plan_comida_tipo
}

model fit_image {
  N_ID_IMAGE        Int           @id @default(autoincrement())
  X_URL             String        @db.Text
  fit_plan          fit_plan?     @relation(fields: [N_ID_PLAN], references: [N_ID_PLAN])
  N_ID_PLAN         Int?
}

model fit_plan_comida_dia {
  N_ID_PLAN_COMIDA_DIA Int       @id @default(autoincrement())
  N_ID_PLAN            Int
  N_ID_COMIDA          Int
  X_DIA                String    @db.VarChar(20)

  fit_plan             fit_plan  @relation(fields: [N_ID_PLAN], references: [N_ID_PLAN], onDelete: Cascade)
  fit_comida           fit_comida @relation(fields: [N_ID_COMIDA], references: [N_ID_COMIDA], onDelete: Cascade)

  @@index([N_ID_PLAN], map: "fit_plan_comida_dia_plan")
  @@index([N_ID_COMIDA], map: "fit_plan_comida_dia_comida")
}

model fit_horario_comida {
  N_ID_SCHEDULE  Int       @id @default(autoincrement())
  N_ID_USUARIO   Int
  F_FECHA        DateTime
  N_ID_COMIDA    Int

  fit_usuario    fit_usuario @relation(fields: [N_ID_USUARIO], references: [N_ID_USUARIO], onDelete: Cascade)
  fit_comida     fit_comida  @relation(fields: [N_ID_COMIDA], references: [N_ID_COMIDA], onDelete: Cascade)

  @@index([N_ID_USUARIO], map: "fit_horario_comida_usuario")
  @@index([N_ID_COMIDA], map: "fit_horario_comida_comida")
}

model fit_plan_comida_tipo {
  N_ID_PLAN_COMIDA_TIPO Int       @id @default(autoincrement())
  N_ID_PLAN             Int
  X_TIPO_COMIDA         fit_comida_X_TIPO_COMIDA

  fit_plan              fit_plan @relation(fields: [N_ID_PLAN], references: [N_ID_PLAN], onDelete: Cascade)

  @@index([N_ID_PLAN], map: "fit_plan_comida_tipo_plan")
}

model fit_unidad_medida {
  N_ID_UNIDAD_MEDIDA    Int                              @id @default(autoincrement())
  X_UNIDAD_MEDIDA       String?                          @db.VarChar(50)
  X_ABREV_UNIDAD_MEDIDA String?                          @db.VarChar(10)
  X_TIPO_UNIDAD         fit_unidad_medida_X_TIPO_UNIDAD?
  fit_ingredientes      fit_ingredientes[]
}

model fit_usuario {
  N_ID_USUARIO          Int        @id @default(autoincrement())
  N_ID_PLAN             Int?
  X_NOMBRE              String    @db.VarChar(100)
  X_APELLIDO            String    @db.VarChar(100)
  X_EMAIL               String    @unique @db.VarChar(100)
  X_CONTRASENA          String    @db.VarChar(100)
  X_TELEFONO            String    @db.VarChar(20)
  F_REGISTRO            DateTime?  
  X_SEXO                String?    @db.VarChar(10)
  X_FECHA_NAC           DateTime?
  F_FECHA_FIN_PLAN      DateTime? 
  X_CODIGO_VERIFICACION String?    @db.VarChar(6)
  estado_verificacion   Int       @default(0)
  fit_pago              fit_pago[]
  fit_plan              fit_plan?  @relation(fields: [N_ID_PLAN], references: [N_ID_PLAN], onDelete: Restrict, onUpdate: Restrict, map: "fit_usuario_ibfk_1")
  fit_direccion         fit_direccion[]
  fit_horario_comida    fit_horario_comida[] // Relación con fit_horario_comida
  fit_pedido            fit_pedido[]

  @@index([N_ID_PLAN], map: "N_ID_PLAN")
}

model fit_direccion {
  N_ID_DIRECCION    Int          @id @default(autoincrement())
  N_ID_USUARIO      Int
  nombre            String?      @db.VarChar(50)
  departamento      Departamento @relation(fields: [departamentoId], references: [id])
  departamentoId    Int
  provincia         Provincia    @relation(fields: [provinciaId], references: [id])
  provinciaId       Int
  distrito          Distrito     @relation(fields: [distritoId], references: [id])
  distritoId        Int
  tipo_calle        String       @db.VarChar(50)
  nombre_calle      String       @db.VarChar(100)
  numero            String?      @db.VarChar(20)
  piso_departamento String?      @db.VarChar(50)
  tipo_direccion    String       @db.VarChar(10)
  telefono_contacto String       @db.VarChar(20)
  referencias       String?      @db.VarChar(120)
  usuario           fit_usuario  @relation(fields: [N_ID_USUARIO], references: [N_ID_USUARIO], onDelete: Cascade)
  fit_pedido      fit_pedido[]

  @@index([N_ID_USUARIO], map: "fit_direccion_usuario_idx")
  @@map("fit_direccion")
}

model Distrito {
  id           Int        @id @default(autoincrement())
  nombre       String
  provincia    Provincia  @relation(fields: [provinciaId], references: [id])
  provinciaId  Int

  direcciones  fit_direccion[] 

  @@unique([nombre, provinciaId])
}

model Provincia {
  id             Int          @id @default(autoincrement())
  nombre         String
  departamento   Departamento @relation(fields: [departamentoId], references: [id])
  departamentoId Int

  distritos      Distrito[]   
  direcciones    fit_direccion[] 

  @@unique([nombre, departamentoId])
}

model Departamento {
  id            Int           @id @default(autoincrement())
  nombre        String        @unique

  provincias    Provincia[]   
  direcciones   fit_direccion[] 
}


enum fit_pedido_X_ESTADO_PEDIDO {
  Completado
  Pendiente
  Cancelado
}

enum fit_unidad_medida_X_TIPO_UNIDAD {
  Masa
  Volumen
  Cantidad
}

enum fit_comida_X_TIPO_COMIDA {
  Desayuno
  Ensalada
  Almuerzo
  Cena
  Snacks
}

enum fit_pago_X_ESTADO_PAGO {
  Pendiente
  Completado
  Fallido
}
